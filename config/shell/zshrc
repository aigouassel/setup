# ================================================================
# Oh-My-Zsh Configuration
# ================================================================
export ZSH="$HOME/.oh-my-zsh"

# Theme configuration
# Available themes: https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# Popular options: robbyrussell, agnoster, powerlevel10k/powerlevel10k, refined, clean, etc.
ZSH_THEME="robbyrussell"

# Plugin configuration
# Available plugins: https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins
# Commonly used: git, brew, docker, node, npm, python, vscode, macos, etc.
plugins=(git battery node npm docker)

# ================================================================
# Oh-My-Zsh Plugin Descriptions (for reference)
# ================================================================
# git        - Git aliases and prompt integration
# battery    - Shows battery status in prompt (macOS)
# node       - Node.js related aliases and completion
# npm        - NPM aliases and completion
# docker     - Docker aliases and completion
# brew       - Homebrew aliases and completion
# python     - Python aliases and completion
# vscode     - VS Code aliases (code .)
# macos      - macOS specific aliases and functions
# web-search - Search engines from terminal
# z          - Jump around directories based on frecency
# ================================================================

# Load Oh-My-Zsh
source $ZSH/oh-my-zsh.sh

# ================================================================
# User Configuration
# ================================================================

# Default editor (options: vim, nano, code, etc.)
export EDITOR='vim'
export VISUAL='vim'  # Used by some programs for visual editing

# Locale settings
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# ================================================================
# History Configuration
# ================================================================
HISTSIZE=10000                # Number of commands to keep in memory
SAVEHIST=10000               # Number of commands to save to file
setopt HIST_IGNORE_DUPS      # Don't save duplicate commands
setopt HIST_FIND_NO_DUPS     # Don't show duplicates when searching
setopt SHARE_HISTORY         # Share history between terminal sessions
# Additional options:
# setopt HIST_IGNORE_SPACE   # Don't save commands that start with space
# setopt HIST_VERIFY         # Show command before executing from history
# setopt EXTENDED_HISTORY    # Save timestamp and duration

# ================================================================
# Auto-completion Configuration
# ================================================================
autoload -Uz compinit
compinit

# Case-insensitive completion
# zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Menu-style completion
# zstyle ':completion:*' menu select

# Colorize completion listings
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# ================================================================
# PATH Configuration
# ================================================================

# Custom PATH additions
export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"

# ================================================================
# Version Managers & Development Tools
# ================================================================

# Node.js Version Manager (NVM)
# Installation: brew install nvm
# Usage: nvm install <version>, nvm use <version>, nvm alias default <version>
export NVM_DIR="$HOME/.nvm"
[ ! -d "$NVM_DIR" ] && mkdir -p "$NVM_DIR"  # Create directory if needed
if [ -s "/opt/homebrew/opt/nvm/nvm.sh" ]; then
  source "/opt/homebrew/opt/nvm/nvm.sh"
  # Load nvm bash completion
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && source "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
fi

# Python Version Manager (Pyenv)
# Installation: brew install pyenv
# Usage: pyenv install <version>, pyenv global <version>, pyenv local <version>
export PYENV_ROOT="$HOME/.pyenv"
if command -v pyenv >/dev/null 2>&1; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi

# Docker Desktop CLI tools
# Ensures docker and docker-compose are available if Docker Desktop is installed
if [ -d "/Applications/Docker.app" ]; then
  export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"
fi

# ================================================================
# Additional Tool Configurations (uncomment as needed)
# ================================================================

# Ruby Version Manager (rbenv) - if you decide to use Ruby
# export PATH="$HOME/.rbenv/bin:$PATH"
# if command -v rbenv >/dev/null 2>&1; then
#   eval "$(rbenv init - zsh)"
# fi

# Go programming language
# export GOPATH="$HOME/go"
# export PATH="$GOPATH/bin:$PATH"

# Rust programming language (Cargo)
# export PATH="$HOME/.cargo/bin:$PATH"

# Java (if using multiple versions)
# export JAVA_HOME="/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home"

# Android SDK (if doing mobile development)
# export ANDROID_HOME="$HOME/Library/Android/sdk"
# export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"

# Flutter (if doing mobile development)
# export PATH="$HOME/flutter/bin:$PATH"